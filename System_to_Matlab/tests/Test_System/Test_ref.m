function [sys,x0,str,ts] = Test(t,x,u,flag,params,x_ic) 
 switch flag, 
	case 0, % initialization 
	 	sizes = simsizes; 
	 	sizes.NumContStates = 6; 	% number of continous states 
	 	sizes.NumDiscStates = 0; 	% number of discrete states 
	 	sizes.NumOutputs = 6; 	% number of system outputs 
	 	sizes.NumInputs = 3; 	% number of system inputs 
	 	sizes.DirFeedthrough = 0; 	% direct feedtrough flag 
	 	sizes.NumSampleTimes = 1; 	% at least one sample time is needed 
	 	sys = simsizes(sizes); 
 
	 	% initial conditions 
	 	x0 = x_ic; 
 
	 	str = []; % str is always an empty matrix
 
	 	ts = [0 0];% initialize the array of sample times 
 
	case 1, % derivative 
	 	g = params(1);
		m2 = params(2);
		m3 = params(3);
		s2 = params(4);
		s3 = params(5);
		l2 = params(6);
		l3 = params(7);
		BS1 = params(8);
		AS2 = params(9);
		BS2 = params(10);
		CS2 = params(11);
		AS3 = params(12);
		BS3 = params(13);
		CS3 = params(14);
		iG1 = params(15);
		iG2 = params(16);
		iG3 = params(17);
		BM1 = params(18);
		CM2 = params(19);
		CM3 = params(20);
		
	 	sys = zeros(6,1); 
		x0 = sin(x(3));
		x1 = cos(x(1));
		x2 = sin(x(2));
		x3 = l2.*x2;
		x4 = cos(x(3));
		x5 = s3.*x4;
		x6 = x1.*x3 + x1.*x5;
		x7 = sin(x(1));
		x8 = x6.*x7;
		x9 = -x3.*x7 - x5.*x7;
		x10 = x1.*x9;
		x11 = -x0.*x10 - x0.*x8;
		x12 = x4.^2;
		x13 = s3.*x12;
		x14 = x1.^2;
		x15 = x0.^2;
		x16 = s3.*x15;
		x17 = x7.^2;
		x18 = x13 + x14.*x16 + x16.*x17;
		x19 = x0.*x5;
		x20 = -x14.*x19 - x17.*x19 + x19;
		x21 = x10.*x4 + x4.*x8;
		x22 = m3.*x21;
		x23 = m3.*x11.*x18 + x20.*x22;
		x24 = m2.*s2.^2;
		x25 = cos(x(2));
		x26 = l2.*x25;
		x27 = x14.*x4;
		x28 = x17.*x26;
		x29 = x0.*x3;
		x30 = x26.*x27 + x28.*x4 - x29;
		x31 = x0.*x14;
		x32 = -x0.*x28 - x26.*x31 - x3.*x4;
		x33 = m3.*x32;
		x34 = x11.*x33 + x22.*x30;
		x35 = x2.^2;
		x36 = 1./(AS2.*x25.^2 + AS3.*x15 + BM1.*iG1.^2 + BS1 + BS2.*x35 + BS3.*x12 + m3.*x11.^2 + m3.*x21.^2 + m3.*(x1.*x6 - x7.*x9).^2 + x24.*x35);
		x37 = 1./(CM2.*iG2.^2 + CS2 + m3.*x30.^2 + m3.*x32.^2 + x24 - x34.^2.*x36);
		x38 = x34.*x36;
		x39 = m3.*x20.*x30 + x18.*x33 - x23.*x38;
		x40 = x37.*x39.^2;
		x41 = 1./(CM3.*iG3.^2 + CS3 + m3.*x18.^2 + m3.*x20.^2 - x23.^2.*x36 - x40);
		x42 = x23.*x41;
		x43 = x37.*x39;
		x44 = x41.*x43;
		x45 = m3.*x(5).^2;
		x46 = x26.*x5;
		x47 = x15.*x46;
		x48 = x1.^4;
		x49 = x0.^3;
		x50 = s3.*x3.*x49;
		x51 = x(4).^2;
		x52 = m3.*x51;
		x53 = x50.*x52;
		x54 = x4.*x51;
		x55 = x0.*x54;
		x56 = x4.^3;
		x57 = s3.*x56;
		x58 = x26.*x57;
		x59 = x13.*x29;
		x60 = x45.*x59;
		x61 = 2*x17;
		x62 = x14.*x61;
		x63 = x(6).^2;
		x64 = m3.*s3.^2;
		x65 = x63.*x64;
		x66 = x0.*x56;
		x67 = x65.*x66;
		x68 = x7.^4;
		x69 = x51.*x66;
		x70 = x64.*x68;
		x71 = x4.*x49;
		x72 = x65.*x71;
		x73 = x48.*x52;
		x74 = x49.*x54;
		x75 = x61.*x64;
		x76 = x48.*x64;
		x77 = x52.*x68;
		x78 = x45.*x50;
		x79 = g.*m3;
		x80 = x31.*x56;
		x81 = x61.*x65;
		x82 = x15.*x79;
		x83 = x27.*x49;
		x84 = -AS3.*x55 + BS3.*x55 - iG3.*u(3) + x14.*x74.*x75 - x45.*x47 - x45.*x58 + x48.*x53 + x48.*x60 + x48.*x67 + x48.*x72 + x48.*x78 + x5.*x82 + x51.*x75.*x80 + x52.*x59.*x62 + x53.*x62 + x53.*x68 + x57.*x79 + x59.*x73 + x59.*x77 + x60.*x62 + x60.*x68 + x62.*x78 + x67.*x68 - x67 + x68.*x72 + x68.*x78 + x69.*x70 + x69.*x76 + x70.*x74 - x72 + x74.*x76 + x80.*x81 + x81.*x83;
		x85 = x37.*(x40.*x41 + 1);
		x86 = l2.^2;
		x87 = x15.*x86;
		x88 = x2.*x25;
		x89 = x45.*x88;
		x90 = x87.*x89;
		x91 = x48.*x58;
		x92 = m3.*x63;
		x93 = x51.*x88;
		x94 = x28.*x57;
		x95 = 2*x14;
		x96 = x94.*x95;
		x97 = x47.*x92;
		x98 = m3.*x93;
		x99 = x68.*x98;
		x100 = x12.*x86;
		x101 = x48.*x98;
		x102 = x100.*x89;
		x103 = x62.*x98;
		x104 = x28.*x5;
		x105 = x104.*x15.*x95;
		x106 = x58.*x68;
		x107 = AS2.*x93 - BS2.*x93 - g.*m2.*s2.*x2 - iG2.*u(2) - x100.*x101 - x100.*x103 - x100.*x99 - x101.*x87 - x102.*x48 - x102.*x62 - x102.*x68 + x102 - x103.*x87 - x105.*x52 - x105.*x92 - x106.*x52 - x106.*x92 - x12.*x3.*x79 - x24.*x93 - x3.*x82 - x47.*x73 - x47.*x77 - x48.*x90 - x48.*x97 + x50.*x92 - x52.*x91 - x52.*x96 + x59.*x92 - x62.*x90 - x68.*x90 - x68.*x97 - x87.*x99 + x90 - x91.*x92 - x92.*x96;
		x108 = 2*x(4);
		x109 = x(5).*x88;
		x110 = x108.*x109;
		x111 = x(4).*x(6);
		x112 = x111.*x76;
		x113 = m3.*x(4);
		x114 = x113.*x48;
		x115 = x(5).*x47;
		x116 = x113.*x68;
		x117 = x(5).*x46;
		x118 = x109.*x114;
		x119 = x(5).*x113;
		x120 = m3.*x14;
		x121 = x(5).*x108.*x120;
		x122 = x104.*x121;
		x123 = x(6).*x108;
		x124 = x0.*x4;
		x125 = x123.*x124;
		x126 = m3.*x111;
		x127 = x126.*x68;
		x128 = x123.*x17.*x64;
		x129 = x109.*x116;
		x130 = x126.*x48;
		x131 = x120.*x17;
		x132 = x123.*x131;
		x133 = x111.*x70;
		x134 = x110.*x131;
		x135 = s3.*x29;
		x136 = x109.*x86;
		x137 = -AS2.*x110 + AS3.*x125 + BS2.*x110 - BS3.*x125 - iG1.*u(1) + x100.*x118 + x100.*x129 + x100.*x134 + x106.*x119 + x110.*x24 - x112.*x124 - x112.*x66 - x112.*x71 + x114.*x115 + x114.*x117 + x114.*x136 + x115.*x116 + x116.*x117 + x116.*x136 + x118.*x87 + x119.*x91 + x121.*x94 + x122.*x15 + x122 - x124.*x133 - x127.*x135 - x127.*x50 - x127.*x59 - x128.*x31.*x4 - x128.*x80 - x128.*x83 + x129.*x87 - x130.*x135 - x130.*x50 - x130.*x59 - x132.*x135 - x132.*x50 - x132.*x59 - x133.*x66 - x133.*x71 + x134.*x86 + x134.*x87;
		x138 = -x23.*x36 + x38.*x43;
		x139 = x138.*x41;
		x140 = x37.*(-x139.*x39 - x38);
		x141 = x41.*x84;

		sys = [x(4); x(5); x(6); -x107.*x36.*(-x34.*x85 + x42.*x43) - x137.*x36.*(-x138.*x42 - x140.*x34 + 1) - x36.*x84.*(x34.*x44 - x42); -x107.*x85 - x137.*x140 + x141.*x43; x107.*x44 - x137.*x139 - x141];

	case 3, % output 
	 	g = params(1);
		m2 = params(2);
		m3 = params(3);
		s2 = params(4);
		s3 = params(5);
		l2 = params(6);
		l3 = params(7);
		BS1 = params(8);
		AS2 = params(9);
		BS2 = params(10);
		CS2 = params(11);
		AS3 = params(12);
		BS3 = params(13);
		CS3 = params(14);
		iG1 = params(15);
		iG2 = params(16);
		iG3 = params(17);
		BM1 = params(18);
		CM2 = params(19);
		CM3 = params(20);
		
	 	sys = zeros(6,1); 

		sys = [x(1); x(2); x(3); x(4); x(5); x(6)];

	case {2,4,9}, % unused flags 
	 	sys = []; 
	otherwise % unused flags 
	 	error(['Unhandled flag = ',num2str(flag)]); 
end